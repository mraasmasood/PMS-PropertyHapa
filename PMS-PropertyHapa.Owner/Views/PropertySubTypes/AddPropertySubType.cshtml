@using System.Text.Json
@model PMS_PropertyHapa.Models.DTO.PropertySubTypeDto

@{
    ViewData["Title"] = Model?.PropertySubTypeId == 0 ? "Add Property Subtype" : "Edit Property Subtype";
    Layout = "~/Views/Shared/ManagePropertyforOwnerLayout.cshtml";
}
<div id="loadingSpinner" class="spinner-border text-primary" role="status" style="display: none;">
    <span class="visually-hidden">Loading...</span>
</div>
<div class="page-body">
    <div class="container-fluid">
        <div class="page-title">
            <div class="row">
                <div class="col-12 col-sm-6">
                    <h3>@(ViewData["Title"])</h3>
                </div>
                <div class="col-12 col-sm-6">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "PropertySubTypes")"><i data-feather="home"></i></a></li>
                        <li class="breadcrumb-item">PropertySubType</li>
                        <li class="breadcrumb-item active">@ViewData["Title"]</li>
                    </ol>
                </div>
            </div>
        </div>

        <div class="edit-profile">
            <div class="row">
                <form id="propertySubTypeForm" enctype="multipart/form-data">
                    <div class="col-xl-12">
                        <div class="card">
                            <div class="card-header pb-0">
                                <h4 class="card-title mb-0">Property Subtype Information</h4>
                                <div class="card-options">
                                    <a class="card-options-collapse" href="#" data-bs-toggle="card-collapse"><i class="fe fe-chevron-up"></i></a>
                                    <a class="card-options-remove" href="#" data-bs-toggle="card-remove"><i class="fe fe-x"></i></a>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <input type="hidden" id="PropertySubTypeId" name="PropertySubTypeId" value="@Model.PropertySubTypeId" />

                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label for="PropertyTypeId" class="form-label">Property Sub Type Name</label>
                                            <select class="form-control" id="PropertyTypeId" name="PropertyTypeId" required>
                                                <option value="" disabled selected hidden>Select Property Type</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label for="Icon_SVG2" class="form-label">Icon SVG</label>
                                            <input type="file" class="form-control" id="Icon_SVG2" name="Icon_SVG2" />
                                        </div>
                                    </div>

                                    <div class="col-sm-6">
                                        <div class="mb-3">
                                            <label for="Status" class="form-label">Status</label>
                                            <select class="form-control" id="Status" name="Status" required>
                                                <option value="" disabled selected hidden>Select Status</option>
                                                <option value="true">Active</option>
                                                <option value="false">Inactive</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-end">
                                <button type="button" id="submitBtn" onclick="submitPropertySubTypeForm()" class="btn btn-primary">
                                    @((Model?.PropertySubTypeId == null || Model?.PropertySubTypeId == 0) ? "Add" : "Edit") Property Subtype
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@{
    var selectedPropertyTypeIdJson = JsonSerializer.Serialize(Model?.PropertyTypeId ?? 0);
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        var selectedPropertyTypeId = @Html.Raw(selectedPropertyTypeIdJson);
        var selectedStatus = @Html.Raw(JsonSerializer.Serialize(Model?.Status.ToString().ToLower() ?? ""));

        if (selectedStatus !== "") {
            $('#Status').val(selectedStatus);
        }

        loadPropertyTypes(selectedPropertyTypeId);
    });


 
    var IconSVG;
    var propertytypeId;
    function loadPropertyTypes(selectedPropertyTypeId) {
        $.ajax({
            url: '@Url.Action("GetPropertyTypeAll", "PropertySubTypes")',
            type: 'GET',
            dataType: 'json',
            beforeSend: function () {
                $('#loadingSpinner').show();
            },
            success: function (response) {
                var propertyTypeIdDropdown = $('#PropertyTypeId');
                propertyTypeIdDropdown.empty();
                propertyTypeIdDropdown.append('<option value="" disabled selected hidden>Select Property Type</option>');
                $.each(response.data, function (index, propertyType) {
                    var isSelected = propertyType.PropertyTypeId == selectedPropertyTypeId;
                    var option = new Option(propertyType.PropertyTypeName, propertyType.PropertyTypeId, isSelected, isSelected);
                    propertyTypeIdDropdown.append(option);
                });
            },
            complete: function () {
                $('#loadingSpinner').hide();
            },
            error: function (xhr, status, error) {
                console.error('AJAX error fetching property types:', error);
            }
        });
    }
    function submitPropertySubTypeForm() {
        debugger
        var formData = new FormData($('#propertySubTypeForm')[0]);
        formData.append('Status', $('#Status').val());
        formData.append("Icon_SVG2", $('#Icon_SVG2')[0].files[0]);
        var userId = localStorage.getItem('userId');
        var userName = localStorage.getItem('userName');

        if (@(Model != null && Model.PropertySubTypeId == 0 ? "true" : "false")) {
            formData.append("AddedBy", userName);
            var addedDate = new Date().toISOString().slice(0, 10);
            formData.append("AddedDate", addedDate);
            formData.append("TenantId", userId);
        } else {
            formData.append("ModifiedBy", userName);
            var modifiedDate = new Date().toISOString().slice(0, 10);
            formData.append("ModifiedDate", modifiedDate);
            formData.append("TenantId", userId);
            formData.append("Icon_SVG", IconSVG);
        }

        var url = '';
        var method = '';

        if (@(Model?.PropertySubTypeId == null || Model?.PropertySubTypeId == 0 ? "true" : "false")) {
            url = '@Url.Action("Create", "PropertySubTypes")';
            method = 'POST';
        } else {
            url = '@Url.Action("Update", "PropertySubTypes")';
            method = 'POST';
        }

        $.ajax({
            url: url,
            type: method,
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                if (response.success) {
                    window.location.href = '@Url.Action("Index", "PropertySubTypes")';
                    var Toast = Swal.mixin({ toast: true, position: 'top-end', showConfirmButton: false, progressBar: true, timer: 3000 });
                    Toast.fire({ icon: 'success', title: 'Updated Successfully' });
                } else {
                    var Toast = Swal.mixin({ toast: true, position: 'top-end', showConfirmButton: false, progressBar: true, timer: 3000 });
                    Toast.fire({ icon: 'error', title: 'An error occurred' });
                }
            },
            error: function (xhr, status, error) {
                var Toast = Swal.mixin({ toast: true, position: 'top-end', showConfirmButton: false, progressBar: true, timer: 3000 });
                Toast.fire({ icon: 'error', title: 'An error occurred' });
            }
        });
    }

</script>
